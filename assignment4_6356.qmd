---
title: "Assignment 4: Hackathon 1"
---

Q. A designer is trained through repetitive practices and creating multiple works on the same object. This assignment follows that method and requests doing charts via a programming approach. Let's do a hackathon and generate charts in the next 48 hours. Rules: a. Generate a program to create a chart using either R Graphics or ggplot2 or any R packages (no other methods/software are allowed).

Charts for this week: 1-4 in Chart thought starter:

![](images/Screenshot 2023-12-09 170222.png){width="657"}

### Chart 1: Variable width column chart

```{r}

library(ggplot2)

# Make data
data <- data.frame(
  group = c("A ", "B ", "C ", "D "),
  value = c(50, 50, 56, 50),
  number_of_obs = c(150, 250, 300, 275)
)

# Calculate the future positions on the x-axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs) + 30 * (0:(nrow(data) - 1))
data$left <- data$right - data$number_of_obs

# Plot
ggplot(data, aes(ymin = 0)) +
  geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
  xlab("Observations") +
  ylab("Value") +
  theme_minimal() +  # Use the default ggplot2 theme
  theme(legend.position = "none")
```

### Chart 2: Table or Table with Embedded Charts

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("patchwork")
library(ggplot2)
library(patchwork)

data <- data.frame(
  Category = c("A", "B", "C", "D"),
  Value = c(10, 15, 8, 20)
)

bar_chart <- ggplot(data, aes(x = Category, y = Value)) +
  geom_bar(stat = "identity") +
  labs(title = "Bar Chart")

scatter_plot <- ggplot(data, aes(x = Category, y = Value)) +
  geom_point() +
  labs(title = "Scatter Plot")

charts_combined <- bar_chart + scatter_plot + plot_layout(ncol = 2)

print(charts_combined)
```

### Chart 3: Bar chart with many items

```{r}
# Load the ggplot2 and gridExtra libraries
library(ggplot2)
library(gridExtra)

# Create a sample dataset
data <- data.frame(
  Category = c("Category A", "Category B", "Category C", "Category D", "Category E", "Category F"),
  Value1 = c(30, 50, 20, 40, 60, 25),
  Value2 = c(40, 60, 30, 50, 70, 35)
)

# Create the first vertical bar chart (Value1)
plot1 <- ggplot(data, aes(x = Category, y = Value1, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = rainbow(nrow(data))) +
  labs(title = "Vertical Bar Chart 1",
       x = NULL,
       y = "Value 1") +
  theme_minimal() +
  theme(legend.position = "none") +
  coord_flip()

# Create the second vertical bar chart (Value2)
plot2 <- ggplot(data, aes(x = Category, y = Value2, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = rainbow(nrow(data))) +
  labs(title = "Vertical Bar Chart 2",
       x = NULL,
       y = "Value 2") +
  theme_minimal() +
  theme(legend.position = "none") +
  coord_flip()

# Arrange the two plots side by side
grid.arrange(plot1, plot2, ncol = 2)
```

### Chart 4: Column chart with few items

```{r}
# Load the ggplot2 library
library(ggplot2)

# Create a sample dataset
data <- data.frame(
  Category = c("Category A", "Category B", "Category C"),
  Value1 = c(30, 50, 20),
  Value2 = c(40, 60, 30)
)

# Reshape the data to long format for overlapping columns
library(tidyr)
data_long <- pivot_longer(data, cols = starts_with("Value"), names_to = "Variable", values_to = "Value")

# Create the column chart with slightly overlapping columns
ggplot(data_long, aes(x = Category, y = Value, fill = Variable)) +
  geom_col(position = position_dodge(width = 0.7)) +  # Adjust the width for overlapping
  labs(title = "Overlapping Column Chart",
       x = "Category",
       y = "Value") +
  theme_minimal()
```
